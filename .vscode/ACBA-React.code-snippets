{
	// Place your ACBA-NODE workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"default Endpoint": {
		"scope": "javascript,typescript",
		"prefix": "export const endpoint",
		"body": ["export const ${1:functionName} = async (req, res, next) => {",
				"try {",
					"  // If endpoint uses the JWT then middleware will add obj loggedinUser.userData",
					"  const { tenant, operation, userName, userTblId, userUuid } = req.loggedinUser.userData;",
				    "  const { ${2:PassedInViaBody} } = req.query;",
					"  const { ${3:PassedInViaBody} } = req.body;",
					"  const { ${4:PassedInViaHeader} } = req.headers;",

					"  const ${5:ReturnObject} = {",
					"    haserrors: false,",
					"    statusCode: statusCodes.created,",
					"    errorMessage: 'blank',",
					"    data: insertCompany.toJSON(),",
					"  };",
					"  res.status(statusCodes.success).json(${5:ReturnObject});",
				"} catch (error) {",
					"  const errorMessage = 'Authentication Failed';",
					"  const CreateUserError = {",
					"   ...error,",
					"    statusCode: error.statusCode || statusCodes.error,",
					"    statusMessage: error.statusMessage || errorMessage",
					"  };",
					"  handleSystemError(CreateUserError);",
					"  next(CreateUserError);",
				"} finally {",
				"  ",
				"}",
			  "};"
		],
		"description": "best practice for creating api endpoint"
	},

	"queryString": {
		"scope": "javascript,typescript",
		"prefix": "const queryString",
		"body": ["const { ${2:PassedInViaBody} } = req.query;",
		],
		"description": "extract query data from the url of the request"
	},

	"Promise wrap": {
		"scope": "javascript,typescript, typescriptreact",
		"prefix": "Promise wrap",
		"body": ["return new Promise((resolve, reject) => {",
				 "if (err) {",
			     "  return reject(err);",             
			  	 "}",
				 "return resolve(res);"
		],
		"description": "Create a Promise Wrap"
	},


	"Router": {
		"scope": "javascript,typescript",
		"prefix": "export default nameRouter;",
		"body": [
			"/* eslint-disable max-len */",
			"import express from 'express';",
			"import { get${1:controllerName}, list${1:controllerName}, create${1:controllerName}, update${1:controllerName}, delete${1:controllerName} } from '../controllers';",
			"",
			"const ${2:nameRouter} = express.Router();",
			"",
			"${2:nameRouter}.get('/${3:routename}', get${1:controllerName}); // GET: 200 OK",
			"${2:nameRouter}.get('/${4:routenamepural}', list${1:controllerName}); // GET: 200 OK // LIST",
			"${2:nameRouter}.put('/${3:routename}', update${1:controllerName}); // UPDATE: 200 OK",
			"${2:nameRouter}.post('/${3:routename}', create${1:controllerName}); // POST: 201 Created",
			"${2:nameRouter}.delete('/${3:routename}', delete${1:controllerName}); // DELETE: 200 deleted",
			"export default ${2:nameRouter};",
			"",
			"// Swagger Implementation autocomplete functions available copy parameters from the model",
			"// swaggerGET",
			"// swaggerGETLIST",
			"// swaggerPOST",
			"// swaggerPUT",
			"// swaggerDELETE",
			"}",
		],
		"description": "Create a Routwe"
},
"Controller": {
	"scope": "javascript,typescript",
	"prefix": "controller",
	"body": [
		"/* eslint-disable max-len */",
		"/* eslint-disable guard-for-in */",
		"/* eslint-disable no-restricted-syntax */",
		"// import { Op } from 'sequelize';",
		"// import { statusCodes } from '../../../../helpers/@core/statusCodes';",
		"// import { handleSystemError } from '../../../../helpers/@core/errorHandler';",
"",
		"import FormBuilderModel, { DynamicFormBuilderModel } from '../../../../models/forms/formBuilderModel';",
		"import { StandardAPIEndpoints } from '../../CRUD/standardAPI';",
"",
		"// Start of Assoicated Models in order to support form Builder Model",
		"// End of Assoicated Models in order to support form Builder Model",
"",
		"const ModelName = FormBuilderModel;",
"",
		"const DynamicFormBuilderModelInstance = new DynamicFormBuilderModel();",
"",
		"const StandardAPIEndpointsClassInstance = new StandardAPIEndpoints(ModelName,",
		"DynamicFormBuilderModelInstance);",
"",
		"export const getFormBuilder = async (req, res, next) => {",
		"StandardAPIEndpointsClassInstance.getEntity(req, res, next);",
		"};",
		"export const listFormBuilder = async (req, res, next) => {",
		"StandardAPIEndpointsClassInstance.listEntity(req, res, next);",
		"};",
		"export const createFormBuilder = async (req, res, next) => {",
		"StandardAPIEndpointsClassInstance.createEntity(req, res, next);",
		"};",
		"export const updateFormBuilder = async (req, res, next) => {",
		"StandardAPIEndpointsClassInstance.updateEntity(req, res, next);",
		"};",
		"export const deleteFormBuilder = async (req, res, next) => {",
		"StandardAPIEndpointsClassInstance.deleteEntity(req, res, next);",
		"};",
"",
		"export const getDetailViewFormBuilder = async (req, res, next) => {",
		"StandardAPIEndpointsClassInstance.detailViewFormByModel(req, res, next, ModelName, 'default', 'Detail View', []);",
		"};",
	],
	"description": "Create a default controller"
},

"SQL Count": {
	"scope": "javascript,typescript",
	"prefix": "SQL Count;",
	"body": [
		"try {",
		"	const ${1:Countof} = await ${2:Model}.count({",
		"	  where: {",
		"		userName: username,",
		"	  },",
		"	});",
		"	 console.log(${1:Countof})",
		"	 if ( ${1:Countof} >= 1){",
		"	  return res",
		"	  .status(statusCodes.success)",
		"	  .json({ haserrors: true, error: 'User name aleardy exists' });",
		"	 }",
		"  } catch (error) {",
		"	console.log(error)",
		"	const errorMessage = 'Something went wrong. Please try again';",
		"	const CreateUserError = {",
		"	  ...error,",
		"	  statusCode: error.statusCode || statusCodes.error,",
		"	  statusMessage: error.statusMessage || errorMessage,",
		"	};",
		"	handleSystemError(CreateUserError);",
		"	return next(CreateUserError); // Stop here",
		"  }",
	],
	"description": "Create a SQL Count Query on a Model"
},
"WhereOverride": {
	"scope": "javascript,typescript",
	"prefix": "WhereOverride",
	"body": [
		"// where Override",
		"const whereClause = [];",
		"if (typeOfQuestion === 'drafts') {",
		"	whereClause.push({ name: 'is_sent', value: 0 });",
		"}",
		"whereClause.push({ name: 'is_active', value: 1 });",
		"const whereClauseOverride = true;",
		"req.overrides = {",
		"	whereSettings: {",
		"	whereClause,",
		"	whereClauseOverride",
		"	}",
		"};",
		"// order Override",
		"const orderClause = [];",
		"orderClause.push(DynamicQuestionModelInstance.entityKey);",
		"orderClause.push('DESC');",
		"const orderClauseOverride = true;",
		"req.overrides.orderSettings = {",
		"	orderClause,",
		"	orderClauseOverride",
		"};"
	],
	"description": "Create Where override to send into Standard API functions"
},
"Swagger": {
	"scope": "javascript,typescript",
	"prefix": "swagger",
	"body": [
		"/**",
		"* @swagger",
		"*",
		"* /v1/get${1:nameRouter}:",
		"*   get:",
		"*     description: Allows you to get details of ${1:nameRouter}.",
		"*     produces:",
		"*       - application/json",
		"*     responses:",
		"*       200:",
		"*         description: Returns entity of ${1:nameRouter}.",
		"*     parameters:",
		"*       - name: name",
		"*         in: formData",
		"*         required: true",
		"*         type: string",
		"*/",
		"/**",
		"* @swagger",
		"*",
		"* /v1/list${1:nameRouter}:",
		"*   get:",
		"*     description: Allows you to fetch a list ${1:nameRouter}.",
		"*     produces:",
		"*       - application/json",
		"*     responses:",
		"*       200:",
		"*         description: Returns list of ${1:nameRouter} information.",
		"*     parameters:",
		"*       - name: name",
		"*         in: formData",
		"*         required: true",
		"*         type: string",
		"*/",		
		"/**",
		"* @swagger",
		"*",
		"* /v1/create${1:nameRouter}:",
		"*   post:",
		"*     description: Allows you to get details of ${1:nameRouter}.",
		"*     produces:",
		"*       - application/json",
		"*     responses:",
		"*       200:",
		"*         description: Returns entity of ${1:nameRouter}.",
		"*     parameters:",
		"*       - name: name",
		"*         in: formData",
		"*         required: true",
		"*         type: string",
		"*/",		
		"/**",
		"* @swagger",
		"*",
		"* /v1/update${1:nameRouter}:",
		"*   put:",
		"*     description: Allows you update details of ${1:nameRouter}.",
		"*     produces:",
		"*       - application/json",
		"*     responses:",
		"*       200:",
		"*         description: returns the entity of ${1:nameRouter}.",
		"*     parameters:",
		"*       - name: name",
		"*         in: formData",
		"*         required: true",
		"*         type: string",
		"*/",	
		"/**",
		"* @swagger",
		"*",
		"* /v1/delete${1:nameRouter}:",
		"*   delete:",
		"*     description: Allows you to remove a ${1:nameRouter}.",
		"*     produces:",
		"*       - application/json",
		"*     responses:",
		"*       200:",
		"*         description: deletes ${1:nameRouter} information.",
		"*     parameters:",
		"*       - name: name",
		"*         in: formData",
		"*         required: true",
		"*         type: string",
		"*/",					
	],
	"description": "Create a swagger definitions"
},
"FORINLOOP": {
	"scope": "javascript,typescript, typescriptreact",
	"prefix": "ACBAForInLoop",
	"body": [
	    "for (const key in ${1:passedInentityDataValues}) {",
		"	if (Object.hasOwnProperty.call(${1:passedInentityDataValues}, key)) {",
		"	  // entityDataValues[key] = ${1:passedInentityDataValues}[key];",
		"	 }",
		"  }",
	],
	"description": "Implements a for in loop"
},
"map": {
	"scope": "javascript,typescript, typescriptreact",
	"prefix": "ACBAMap",
	"body": [
		"mirrorFields = ${1:Fields}.map(field => {",
		"	// const { mirrors } = field",
		"	// return mirrors",
		"})",
	],
	"description": "Implements a for in loop"
},
"reduce": {
	"scope": "javascript,typescript, typescriptreact",
	"prefix": "ACBAReduce Object",
	"body": [
		"const newObj = people.reduce((lookup, person) => {",
		"	lookup[person.id] = person",
		"	return lookup",
		"}, {})",
	],
	"description": "Implements a reduce (loop over and retain the prev loop state) on array object best performance over spread"
},
"reduce-spread": {
	"scope": "javascript,typescript, typescriptreact",
	"prefix": "ACBAReduce Using Spread operator",
	"body": [
		"const newObj = people.reduce((lookup, person) => ({",
		"	...lookup",
		"	[person.id]: person",
		"}), {})",
	],
	"description": "Implements a reduce (loop over and retain the prev loop state) )on array object not best performance use return instead"
},
"reduce-pure-array": {
	"scope": "javascript,typescript, typescriptreact",
	"prefix": "ACBAReduce Array",
	"body": [
		"const sum = numbers.reduce((accumulator, currentValue) => {",
		"	return accumulator + currentValue",
		"}, 0)",
	],
	"description": "Implements a reduce on a pure Array (loop over and retain the prev loop state)"
},
"SQL-QUERY-RAW-ACBA-FRAMEWORK": {
	"scope": "javascript,typescript",
	"prefix": "SQL QUERY ACBA FRAMEWORK",
	"body": [
		"const SQLQuery = ${1:SQLQueryReference}",
		"// console.log('${1:SQLQueryReference}', SQLQuery)",
		"const params = {} // key value pairs that will replace ':key' in sql statement with value",
		"const t = await ${2:ModelName}.sequelize.transaction();",
		"const options = { // All Optional",
		"  type: '${3:typeOfSQL}', // i.e SELECT, UPDATE, DELETE, CREATE etc",
		"  transaction: t",
		"	model: CloudProvidersSubscriptionsModel,",
		"	mapToModel: true",
		"}",
		"try {",
		"  const createSubscriptionsDatabase = await SubscriptionsStandardAPIEndpointsClassInstnace.executeSqlProcess(SQLQuery,params,${2:ModelName}, options)",
		"// console.log('createSubscriptionsDatabase', createSubscriptionsDatabase)",
		"} catch (error) {",
		"// console.log('Error in ${1:SQLQueryReference}', error)",
		"  t.rollback()",
		"}",
		"t.commit()",
	],
	"description": "Implements execution of SQL Query"
},
"JSDoc": {
	"scope": "javascript, typescript, typescriptreact",
	"prefix": "JSDoc",
	"body": [
	"/**",
	"* Adds two numbers together.",
	"* @param {int} num1 The first number.",
	"* @param {int} num2 The second number.",
	"* @returns {int} The sum of the two numbers.",
	"*/"
	],
	"description": "JSDoc is a JavaScript API documentation generator. It uses specially-formatted comments inside of code to generate API documentation automatically"
}
